import java.util.Random;

public class PasswordGenerator {
    public static void main(String[] args) {
        int desiredLength = generateRandomLength(8, 16);
        String password = generateRandomPassword(desiredLength);

        System.out.println("Generated Password: " + password);
        System.out.println("Password Length: " + password.length());

        String strength = checkPasswordStrength(password);
        System.out.println("Password Strength: " + strength);
    }

    public static int generateRandomLength(int minLength, int maxLength) {
        Random random = new Random();
        return random.nextInt(maxLength - minLength + 1) + minLength;
    }

    public static String generateRandomPassword(int length) {
        String uppercaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
        String digits = "0123456789";
        String symbols = "!@#$%^&*()_+[]{}|;:,.<>?";

        String allCharacters = uppercaseLetters + lowercaseLetters + digits + symbols;

        Random random = new Random();
        StringBuilder password = new StringBuilder();

        for (int i = 0; i < length; i++) {
            int randomIndex = random.nextInt(allCharacters.length());
            char randomChar = allCharacters.charAt(randomIndex);
            password.append(randomChar);
        }

        return password.toString();
    }

    public static String checkPasswordStrength(String password) {
        int length = password.length();

        if (length < 8) {
            return "Very Weak";
        } else if (length <= 16) {
            boolean hasUppercase = !password.equals(password.toLowerCase());
            boolean hasLowercase = !password.equals(password.toUpperCase());
            boolean hasDigit = password.matches(".*\\d.*");
            boolean hasSymbol = password.matches(".*[!@#$%^&*()_+\\[\\]{}|;:,.<>?].*");

            if (hasUppercase && hasLowercase && hasDigit && hasSymbol) {
                return "Very Strong";
            } else if (hasUppercase && hasLowercase && hasDigit) {
                return "Strong";
            } else {
                return "Medium";
            }
        } else {
            return "Weak";
        }
    }
}
